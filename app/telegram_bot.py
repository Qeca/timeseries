import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7709316638:AAG3RC37YzZXPqxu7666bl5APGKKNEweRtw")
API_URL = os.getenv("API_URL", "http://localhost:8000")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. \n\n"
        "–ù–∞–∂–º–∏ /predict, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.",
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(commands=['predict'])
async def predict_command(message: types.Message):
    """
    –ü—Ä–∏ –≤–≤–æ–¥–µ /predict –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞.
    """
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
    keyboard = InlineKeyboardMarkup()
    for horizon in [1, 5, 10, 20, 30]:
        button = InlineKeyboardButton(
            text=f"{horizon} –¥–µ–Ω—å{'(–¥–Ω–µ–π)' if horizon != 1 else ''}",
            callback_data=f"predict_{horizon}"
        )
        keyboard.add(button)

    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda call: call.data.startswith("predict_"))
async def handle_predict_callback(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç 'predict_X')
    horizon_str = call.data.split("_")[1]
    try:
        horizon = int(horizon_str)
    except ValueError:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
        return

    await call.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=False)

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É —Å–µ—Ä–≤–µ—Ä–∞
        response = requests.post(f"{API_URL}/predict/{horizon}", json={"input_data": []})

        if response.status_code == 200:
            result = response.json()
            dates = result.get("dates", [])
            predictions = result.get("predictions", [])
            formatted_result = "\n".join(
                [f"üìÖ {date}: {val:.4f}" for date, val in zip(dates, predictions)]
            )

            await call.message.reply(
                f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ **{horizon} –¥–Ω–µ–π**:\n\n{formatted_result}",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await call.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {response.text}")

    except Exception as e:
        await call.message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
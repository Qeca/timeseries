import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7709316638:AAG3RC37YzZXPqxu7666bl5APGKKNEweRtw")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_URL = os.getenv("API_URL", "http://localhost:8000")

bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. \n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
        "`/predict HORIZON`\n\n"
        "–ì–¥–µ HORIZON –º–æ–∂–µ—Ç –±—ã—Ç—å: 1, 5, 10, 20, 30.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∂—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.",
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message_handler(commands=['predict'])
async def predict_command(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/predict HORIZON`\n–ü—Ä–∏–º–µ—Ä: `/predict 5`", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        horizon = int(parts[1])
        if horizon not in [1, 5, 10, 20, 30]:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç.")
    except ValueError:
        await message.reply("‚ö†Ô∏è HORIZON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞: `1, 5, 10, 20, 30`.", parse_mode=ParseMode.MARKDOWN)
        return

    await message.reply("‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        response = requests.post(f"{API_URL}/predict/{horizon}", json={"input_data": []})

        if response.status_code == 200:
            result = response.json()
            dates = result.get("dates", [])
            predictions = result.get("predictions", [])
            formatted_result = "\n".join([f"üìÖ {date}: {val:.4f}" for date, val in zip(dates, predictions)])
            await message.reply(
                f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ **{horizon} –¥–Ω–µ–π**:\n\n{formatted_result}",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {response.text}")

    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)